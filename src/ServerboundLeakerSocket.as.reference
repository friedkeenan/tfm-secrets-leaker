package {
    import flash.net.Socket;
    import flash.utils.ByteArray;

    public class ServerboundLeakerSocket extends Socket {
        /*
            NOTE: This class serves as a reference for what
            the generated leaker socket class looks like.
        */

        private var flush_callback: Function;
        private var written_bytes:  ByteArray = new ByteArray();

        public function ServerboundLeakerSocket(flush_callback: Function) {
            this.flush_callback = flush_callback;
        }

        /* NOTE: We only override the methods that we need to for serverbound packets. */

        public override function get connected() : Boolean {
            /* Just always report that we're connected. Makes things faster too. */

            return true;
        }

        public override function writeBytes(bytes: ByteArray, offset: uint = 0, length: uint = 0) : void {
            /*
                NOTE: We clear the buffer because we don't need the
                length and fingerprint data, just the body of the
                packet, which is the second (and last) call to this
                method before the socket is flushed.
            */
            this.written_bytes.clear();
            this.written_bytes.writeBytes(bytes, offset, length);

            this.written_bytes.position = 0;
        }

        public override function flush() : void {
            this.flush_callback(this.written_bytes);
        }
    }
}
